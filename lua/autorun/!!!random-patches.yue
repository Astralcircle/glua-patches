string_format = string.format
isfunction = isfunction
isstring = isstring
SERVER = SERVER

NAME = "Random Patches"
VERSION = "5.1.0"
FULL_NAME = string_format( "%s v%s", NAME, VERSION )
SIDE_COLOR = SERVER and Color( 50, 100, 250 ) or Color( 250, 100, 50 )
LIST = {
    "Improvement for gLua": false
}

cvars_AddChangeCallback = cvars.AddChangeCallback
hook_Add = nil
hook_Run = nil
Patch = nil
do

    hook = hook
    hook_Add = hook.Add
    hook_Run = hook.Run
    CreateConVar = CreateConVar
    setmetatable = setmetatable
    hook_Remove = hook.Remove
    setfenv = setfenv
    assert = assert

	FCVAR_FLAGS = bit.bor( FCVAR_ARCHIVE, FCVAR_REPLICATED )
    _GMETA = {
        __newindex: _G
        __index: _G
    }

    class Patch
        new: ( name, enable, disable ) =>
            assert( isstring( name ), "Argument #1 must be a string!" )
            assert( isfunction( enable ), "Argument #2 must be a function!" )

            enviroment = {}

            do

                lib = {}
                enviroment.hook = setmetatable( lib, {
                    __index: hook
                } )

                lib.Add = ( eventName, identifier, ... ) ->
                    if isstring( identifier )
                        identifier = NAME .. "@" .. name .. "::" .. identifier
                    hook_Add( eventName, identifier, ... )

                lib.Remove = ( eventName, identifier ) ->
                    if isstring( identifier )
                        identifier = NAME .. "@" .. name .. "::" .. identifier
                    hook_Remove( eventName, identifier )

            setmetatable( enviroment, _GMETA )
		    setfenv( enable, enviroment )

            unless isfunction( disable )
                LIST[ name ] = false
                return enable!

		    setfenv( disable, enviroment )

            conVarName = ( SERVER and "s" or "c" ) .. "patch_" .. string.gsub( string.lower( name ), "[%s%p]", "_" )
            LIST[ name ] = conVarName

            if CreateConVar( conVarName, "1", FCVAR_FLAGS, name, 0, 1 )\GetBool!
                enable!
            else
                disable!

            cvars_AddChangeCallback( conVarName, ( _, __, value ) ->
                if value == "1"
                    enable!
                else
                    disable!
            )

do
    cvars_Bool = cvars.Bool
    pairs = pairs
    MsgC = MsgC

    concommand.Add( ( SERVER and "sv_" or "cl_" ) .. "patches", ( ply, __, args ) ->
        if SERVER and IsValid( ply ) and not ply\IsListenServerHost()
            ply\ChatPrint( string_format( "[%s] You do not have enough permissions to run this command.", FULL_NAME ) )
            return

        output = string_format( "%s is a patch/improvement pack for Garry's Mod.\nDeveloped by Pika Software.\nPatch List:\n", FULL_NAME )
        for name, value in pairs( LIST )
            output ..= string_format( " - [%s] %s\n", ( not value or cvars_Bool( value ) ) and "*" or " ", name )
        MsgC( SIDE_COLOR, output )
    )

MsgC( SIDE_COLOR, "[" .. FULL_NAME .. "] ", color_white, table.Random( { "Here For You â™ª", "Game Patched!", "OK", "Successfully initialized!", "Hello there", "Specially for you!", "Hello?", "Wow", "Powered by Pika Software!", "Made with <3", "Yeah, well" } ) .. "\n" )

string.StartsWith = string.StartsWith or string.StartWith

math.Clamp = ( num, min, max ) ->
	if num < min
        return min
	if num > max
        return max
	return num

do
    table = table
    math_random = math.random
    table_GetKeys = table.GetKeys

    table.Shuffle = ( tbl ) ->
        len = #tbl
        for i = len, 1, -1 do
            rand = math_random( len )
            tbl[ i ], tbl[ rand ] = tbl[ rand ], tbl[ i ]
        return tbl

    table.Random = ( tbl, issequential ) ->
        keys = issequential and tbl or table_GetKeys( tbl )
        rand = keys[ math_random( 1, #keys ) ]
        return tbl[ rand ], rand

iscfunction = ( value ) ->
	unless isfunction( value )
        return false
	return debug.getinfo( value ).short_src == "[C]"

ENTITY = FindMetaTable( "Entity" )
ENTITY_IsValid = ENTITY.IsValid

Patch( "Invisible Sounds", ->
    ENTITY_GetNoDraw = ENTITY.GetNoDraw
	hook.Add( "EntityEmitSound", "Catching", ( data ) ->
		entity = data.Entity
        if entity and ENTITY_IsValid( entity ) and ENTITY_GetNoDraw( entity )
            return true
	)
->
    hook.Remove( "EntityEmitSound", "Catching" )
)

RunConsoleCommand = RunConsoleCommand
GetConVar = GetConVar

if SERVER
	CreateConVar( "room_type", "0" )
	scripted_ents.Register( {
		Base: "base_point"
		Type: "point"
	}, "info_ladder" )

	Patch( "Deploy Speed", ->
		RunConsoleCommand( "sv_defaultdeployspeed", "1" )
    ->
        conVar = GetConVar( "sv_defaultdeployspeed" )
        unless conVar
            return
        RunConsoleCommand( "sv_defaultdeployspeed", conVar\GetDefault! )
    )

	PLAYER = FindMetaTable( "Player" )

	if iscfunction( ENTITY.RemoveAllDecals )
        patchName = FULL_NAME .. " - Decals"
		util.AddNetworkString( patchName )

		CRemoveAllDecals = ENTITY.CRemoveAllDecals
		unless isfunction( CRemoveAllDecals )
            CRemoveAllDecals = ENTITY.RemoveAllDecals
            ENTITY.CRemoveAllDecals = CRemoveAllDecals

		func = =>
			CRemoveAllDecals( @ )
			net.Start( patchName )
			net.WriteEntity( @ )
		    net.Broadcast()
        ENTITY.RemoveAllDecals = func

		hook_Add( "PlayerSpawn", patchName, ( ply, transition ) ->
			unless transition
    			func( ply )
		)

    HOOK_MONITOR_HIGH = HOOK_MONITOR_HIGH

	Patch( "Steam Auth Protection", ->
		sv_lan = GetConVar( "sv_lan" )
        PLAYER_Kick = PLAYER.Kick
        PLAYER_IsBot = PLAYER.IsBot
        PLAYER_IsListenServerHost = PLAYER.IsListenServerHost
        PLAYER_IsFullyAuthenticated = PLAYER.IsFullyAuthenticated

		hook.Add( "PlayerInitialSpawn", "Player Spawn", ( ply ) ->
			if sv_lan\GetBool! or PLAYER_IsBot( ply ) or PLAYER_IsListenServerHost( ply ) or PLAYER_IsFullyAuthenticated( ply )
                return
			PLAYER_Kick( ply, "Your SteamID wasn\'t fully authenticated, try restart your Steam client." )
		HOOK_MONITOR_HIGH )
	->
		hook.Remove( "PlayerInitialSpawn", "Player Spawn" )
	)

	-- Fix for https://github.com/Facepunch/garrysmod-issues/issues/2447
	-- https://github.com/SuperiorServers/dash/blob/master/lua/dash/extensions/player.lua#L44-L57
	Patch( "Player SetPos", ->
        ENTITY_SetPos = ENTITY.SetPos
		positions = {}

		PLAYER.SetPos = ( ply, pos ) ->
			positions[ ply ] = pos

        hook.Add( "PlayerDisconnected", "Disconnect", ( ply ) ->
            positions[ ply ] = nil
        )

		hook.Add( "FinishMove", "SetPos", ( ply ) ->
			pos = positions[ ply ]
            unless pos
                return

			ENTITY_SetPos( ply, pos )
			positions[ ply ] = nil
			return true
        )
	)

    ENTITY_GetInternalVariable = ENTITY.GetInternalVariable
    ENTITY_GetClass = ENTITY.GetClass

	Patch( "Smart Area Portals", ->
		ents_FindByClass = ents.FindByClass
		doorClasses = {
			func_door_rotating: true
			prop_door_rotating: true
			func_movelinear: true
			func_door: true
		}

        ENTITY_SetSaveValue = ENTITY.SetSaveValue
        ENTITY_GetName = ENTITY.GetName
        ENTITY_Fire = ENTITY.Fire

		enable = ->
			hook.Add( "EntityRemoved", "Entity Catching", ( entity ) ->
				unless doorClasses[ ENTITY_GetClass( entity ) ]
                    return

				name = ENTITY_GetName( entity )
				if #name == 0 then
                    return

				for portal in *ents_FindByClass( "func_areaportal" )
					if ENTITY_GetInternalVariable( portal, "target" ) ~= name
                        continue
					ENTITY_SetSaveValue( portal, "target", "" )
					ENTITY_Fire( portal, "open" )
			)

		disable = ->
			hook.Remove( "EntityRemoved", "Entity Catching" )

		hook.Add( "PreCleanupMap", "Disable", disable )
		hook.Add( "PostCleanupMap", "Enable", enable )
		hook.Add( "ShutDown", "Disable", disable )
		enable!
    ->
		hook.Remove( "EntityRemoved", "Entity Catching" )
		hook.Remove( "PreCleanupMap", "Disable" )
		hook.Remove( "PostCleanupMap", "Enable" )
	)

	Patch( "HL2 Chargers Physics", ->
        ENTITY_PhysicsInit = ENTITY.PhysicsInit
        ENTITY_PhysWake = ENTITY.PhysWake
		SOLID_VPHYSICS = SOLID_VPHYSICS

		hook.Add( "PlayerSpawnedSENT", "Creation", ( ply, entity ) ->
            className = ENTITY_GetClass( entity )
            if className ~= "item_suitcharger" and className ~= "item_healthcharger"
                return
            ENTITY_PhysicsInit( entity, SOLID_VPHYSICS )
            ENTITY_PhysWake( entity )
		)
	->
		hook.Remove( "PlayerSpawnedSENT", "Creation" )
	)

	-- Little optimization idea by Billy (used in voicebox)
	-- "for something that really shouldn't be O(n)"
	-- https://i.imgur.com/yPtoNvO.png
	-- https://i.imgur.com/a0lmB9m.png
	Patch( "UserID Cache", ->
        unless iscfunction( PLAYER.UserID )
            return

		CUserID = PLAYER.CUserID
		unless CUserID
			CUserID = PLAYER.UserID
            PLAYER.CUserID = CUserID

		PLAYER.UserID = ( ply ) ->
			return ply.__UserID or CUserID( ply )

		cacheUserID = ( ply ) ->
			ply.__UserID = CUserID( ply )

		hook.Add( "PlayerInitialSpawn", "Cache", cacheUserID, HOOK_MONITOR_HIGH )
		hook.Add( "PlayerAuthed", "Cache", cacheUserID, HOOK_MONITOR_HIGH )
	)

	-- Pod network fix by Kefta (code_gs#4197)
	-- Literally garrysmod-issues #2452
	Patch( "Pod Performance", ->
		EFL_NO_THINK_FUNCTION = EFL_NO_THINK_FUNCTION
        ENTITY_AddEFlags = ENTITY.AddEFlags

		hook.Add( "OnEntityCreated", "Created", ( vehicle ) ->
			if ENTITY_GetClass( vehicle ) ~= "prop_vehicle_prisoner_pod"
                return
			ENTITY_AddEFlags( vehicle, EFL_NO_THINK_FUNCTION )
		)

		hook.Add( "PlayerLeaveVehicle", "Leave", ( _, vehicle ) ->
			if ENTITY_GetClass( vehicle ) ~= "prop_vehicle_prisoner_pod"
                return
            hook.Add( "Think", vehicle, ( entity ) ->
				hook.Remove( "Think", entity )
				if ENTITY_GetInternalVariable( entity, "m_bEnterAnimOn" ) or ENTITY_GetInternalVariable( entity, "m_bExitAnimOn" )
                    return
				ENTITY_AddEFlags( entity, EFL_NO_THINK_FUNCTION )
            )
		)

        ENTITY_RemoveEFlags = ENTITY.RemoveEFlags
		hook.Add( "PlayerEnteredVehicle", "Enter", ( _, vehicle ) ->
            if ENTITY_GetClass( vehicle ) ~= "prop_vehicle_prisoner_pod"
                return
			ENTITY_RemoveEFlags( vehicle, EFL_NO_THINK_FUNCTION )
		)
	->
		hook.Remove( "OnEntityCreated", "Created" )
		hook.Remove( "PlayerLeaveVehicle", "Leave" )
		hook.Remove( "PlayerEnteredVehicle", "Enter" )
	)

	-- Fixes for prop_vehicle_prisoner_pod, worldspawn (and other not Valid but not NULL entities) damage taking (bullets only)
	-- Explosive damage only works if is located in front of prop_vehicle_prisoner_pod (wtf?)
	Patch( "prop_vehicle_prisoner_pod Explosive Damage", ->
		ENTITY_TakePhysicsDamage = ENTITY.TakePhysicsDamage
        hook.Add( "EntityTakeDamage", "Damage Catching", ( entity, damageInfo ) ->
            if ENTITY_GetClass( entity ) ~= "prop_vehicle_prisoner_pod" or entity.AcceptDamageForce
                return
			ENTITY_TakePhysicsDamage( entity, damageInfo )
		)
	->
		hook.Remove( "EntityTakeDamage", "Damage Catching" )
	)

    return

do
    cam_Start = cam.Start
    view = { type: "2D" }
    cam.Start2D = ->
        cam_Start( view )

do
    local func = LocalPlayer
    if iscfunction( func )
        global CLocalPlayer = func
        entity = nil

        global LocalPlayer = ->
            entity = func!

            if entity and ENTITY_IsValid( entity )
                global LocalPlayer = ->
                    return entity
            return entity

Patch( "FPS Limiter", ->
    cl_fps_limit = CreateClientConVar( "cl_fps_limit", "60", true, true, "Unique per player frames-per-second limit.", 30, 360 )

    syncLimit = ->
        RunConsoleCommand( "fps_max", cl_fps_limit\GetInt! )
    cvars_AddChangeCallback( "fps_max", syncLimit, FULL_NAME )
    syncLimit!

    cvars_AddChangeCallback( "cl_fps_limit"
        ( _, __, value ) ->
            RunConsoleCommand( "fps_max", value )
    FULL_NAME )
->
    cvars.RemoveChangeCallback( "fps_max", FULL_NAME )
    cvars.RemoveChangeCallback( "cl_fps_limit", FULL_NAME )
    RunConsoleCommand( "fps_max", GetConVar( "fps_max" )\GetDefault! )
)

do

    system_HasFocus = system.HasFocus

    do
        lastFocusState = system_HasFocus!
        hook_Add( "Think", "OnScreenFocusChanged", ->
            currentFocusState = system_HasFocus!
            if lastFocusState ~= currentFocusState
                lastFocusState = currentFocusState
                hook_Run( "OnScreenFocusChanged", currentFocusState )
        )

    Patch( "Focus Attack Fix", ->
        IN_ATTACK, IN_ATTACK2 = IN_ATTACK, IN_ATTACK2
        lastNoFocusTime = 0
        CurTime = CurTime

        hook.Add( "CreateMove", "Attack Limitter", ( cmd ) ->
            if ( CurTime! - lastNoFocusTime ) < 0.25
                cmd\RemoveKey( IN_ATTACK )
                cmd\RemoveKey( IN_ATTACK2 )
            if system_HasFocus()
                return
            lastNoFocusTime = CurTime!
        )
    ->
        hook.Remove( "CreateMove", "Attack Limitter" )
    )

    Patch( "Render Disabler", ->
        hook.Add( "OnScreenFocusChanged", "Catching", ( focusState ) ->
            if focusState
                hook.Remove( "RenderScene", "Disabling" )
            else
                hook.Add( "RenderScene", "Disabling", ->
                    return true
                )
        )
    ->
        hook.Remove( "OnScreenFocusChanged", "Catching" )
        hook.Remove( "RenderScene", "Disabling" )
    )

    Patch( "False Screen Capture Fix", ->
        lastState = nil

        hook.Add( "OnScreenFocusChanged", "Catching", ( focusState ) ->
            if focusState
                if lastState ~= nil
                    if lastState
                        gui.HideGameUI!
                    lastState = nil
            elseif lastState == nil
                lastState = not gui.IsGameUIVisible!
                if lastState
                    gui.ActivateGameUI!
        )
    ->
        hook.Remove( "OnScreenFocusChanged", "Catching" )
    )

string_sub = string.sub

Patch( "Bind Fix", ->
    string_StartsWith = string.StartsWith
    binds = {}

    hook.Add( "PlayerBindPress", "Down", ( _, bind, __, keyCode ) ->
        unless string_StartsWith( bind, "+" )
            return
        binds[ keyCode ] = string_sub( bind, 2, #bind )
    )

    hook.Add( "PlayerButtonUp", "Up", ( ply, keyCode ) ->
        local bind = binds[ keyCode ]
        unless bind
            return
        binds[ keyCode ] = nil
        hook_Run( "PlayerBindPress", ply, "-" .. bind, true, keyCode )
    )
)

Patch( "Arrow Camera Control Fix", ->
    state = 0

    hook.Add( "PlayerBindPress", "Bind", ( _, bind, isDown ) ->
        unless isDown
            return

        keyPrase = string_sub( bind, 2, #bind )
        if keyPrase == "lookup"
            state = string_sub( bind, 1, 1 ) == "+" and 1 or 0
            return true
        elseif keyPrase == "lookdown"
            state = string_sub( bind, 1, 1 ) == "+" and -1 or 0
            return true
    )

    cl_pitchspeed = GetConVar( "cl_pitchspeed" )
    FrameTime = FrameTime
    IN_SPEED = IN_SPEED

    hook.Add( "StartCommand", "Controll", ( _, cmd ) ->
        if state == 0
            return
        angles = cmd\GetViewAngles()
        angles[ 1 ] = angles[ 1 ] - ( cl_pitchspeed\GetFloat! * ( FrameTime! * state  ) / ( cmd\KeyDown( IN_SPEED ) and 4 or 2 ) )
        cmd\SetViewAngles( angles )
    )
->
    hook.Remove( "StartCommand", "Controll" )
    hook.Remove( "PlayerBindPress", "Bind" )
)

do
    ENTITY_RemoveAllDecals = ENTITY.RemoveAllDecals
    net_ReadEntity = net.ReadEntity
    net.Receive( "RemoveAllDecalsFix", ->
        entity = net_ReadEntity()
        unless ENTITY_IsValid( entity )
            return
        ENTITY_RemoveAllDecals( entity )
    )