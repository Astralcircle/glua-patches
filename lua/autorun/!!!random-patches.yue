-- ULib support ( I really don't like this )
if file.Exists( "ulib/shared/hook.lua", "LUA" )
    include( "ulib/shared/hook.lua" )

hook_Add, hook_Remove = hook.Add, hook.Remove
PRE_HOOK = PRE_HOOK or HOOK_MONITOR_HIGH
color_white = color_white
import Simple from timer
CurTime = CurTime
CLIENT = CLIENT
SERVER = SERVER
pairs = pairs

addonName = "Random Patches v5.20.0"

getHookName = ( patchName, hookName ) ->
    return addonName .. "::" .. patchName .. ( hookName or "" )

local Register
do

    import AddChangeCallback from cvars
    import gsub, lower from string
    FCVAR_ARCHIVE = FCVAR_ARCHIVE
    CreateConVar = CreateConVar

    FCVAR_FLAGS = bit.bor( FCVAR_ARCHIVE, FCVAR_REPLICATED, FCVAR_NOTIFY, FCVAR_DONTRECORD )

    Register = ( name, enable, disable, shared ) ->
        hookName = getHookName( name )

        if disable == nil
            return enable( hookName )

        conVarName = ( SERVER and "sv_" or "cl_" ) .. "patch_" .. gsub( lower( name ), "[%s%p]", "_" )

        if CreateConVar( conVarName, "1", shared and FCVAR_FLAGS or FCVAR_ARCHIVE, name, 0, 1 )\GetBool!
            enable( hookName )

        AddChangeCallback( conVarName, ( _, __, value ) ->
            if value == "1"
                enable( hookName )
            else
                disable( hookName )

        addonName )

-- GLua improvements
string.StartsWith = string.StartsWith or string.StartWith

table.Empty = ( tbl ) ->
    for key in pairs( tbl )
        tbl[ key ] = nil

math.Clamp = ( number, min, max ) ->
	if number < min
        return min

    if number > max
        return max

	return number

do

    import random from math
    index, length = 1, 0

    table.Shuffle = ( tbl ) ->
        length = #tbl
        for i = length, 1, -1
            index = random( 1, length )
            tbl[ i ], tbl[ index ] = tbl[ index ], tbl[ i ]

        return tbl

    do

        keys = setmetatable( {}, { __mode: "v" } )

        table.Random = ( tbl, issequential ) ->
            if issequential
                length = #tbl
                if length == 0
                    return nil, nil

                if length == 1
                    index = 1
                else
                    index = random( 1, length )

            else

                length = 0
                for key in pairs( tbl )
                    length += 1
                    keys[ length ] = key

                if length == 0
                    return nil, nil

                if length == 1
                    index = keys[ 1 ]
                else
                    index = keys[ random( 1, length ) ]

            return tbl[ index ], index

do

    hook_Remove( "OnEntityCreated", "player.Iterator" )
    hook_Remove( "EntityRemoved", "player.Iterator" )

    hook_Remove( "OnEntityCreated", "ents.Iterator" )
    hook_Remove( "EntityRemoved", "ents.Iterator" )

    iterator = ipairs( {} )

    local players
    do

        import GetAll from player

        player.Iterator = ->
            if players == nil
                players = GetAll!

            return iterator, players, 0

    local entities
    do

        import GetAll from ents

        ents.Iterator = ->
            if entities == nil
                entities = GetAll!

            return iterator, entities, 0

    invalidateCache = ( entity ) ->
        if entity\IsPlayer!
            players = nil

        entities = nil

    hook_Add( "OnEntityCreated", "player/ents.Iterator", invalidateCache, PRE_HOOK )
    hook_Add( "EntityRemoved", "player/ents.Iterator", invalidateCache, PRE_HOOK )

do

    import yield from coroutine

    coroutine.wait = ( seconds ) ->
        endTime = CurTime! + seconds
        while true
            if endTime < CurTime!
                return

            yield!

local registry
do

    -- Just to be safe
    global debug = debug or {}

    if isfunction( debug.getregistry )
        registry = debug.getregistry! or {}
    else
        registry = {}

    findMetaTable = __findMetaTable
    unless isfunction( findMetaTable )
        findMetaTable = FindMetaTable
        global __findMetaTable = findMetaTable

    setmetatable( registry, {
        "__index": ( tbl, key ) ->
            metatable = findMetaTable( key )
            if metatable == nil
                return

            rawset( tbl, key, metatable )
            return metatable
    } )

    -- patched FindMetaTable & debug.getregistry
    global FindMetaTable = ( name ) ->
        return registry[ name ]

    debug.getregistry = ->
        return registry

local ENTITY, PLAYER
do

    ENTITY, PLAYER = registry.Entity, registry.Player

    getCTable = ENTITY.GetCTable
    unless getCTable
        getCTable = ENTITY.GetTable
        ENTITY.GetCTable = getCTable

    cache = {}

    hook_Add( "EntityRemove", getHookName( "Entity.GetTable" ), ( entity ) ->
        Simple 0, ->
            cache[ entity ] = nil

    PRE_HOOK )

    getTable = ( entity ) ->
        if cache[ entity ] == nil
            cache[ entity ] = getCTable( entity ) or {}

        return cache[ entity ]

    ENTITY.GetTable = getTable

    ENTITY.__index = ( key ) =>
        value = ENTITY[ key ]
        if value == nil
            value = getTable( @ )[ key ]

        return value

    PLAYER.__index = ( key ) =>
        value = PLAYER[ key ]
        if value == nil
            value = ENTITY[ key ]
            if value == nil
                value = getTable( @ )[ key ]

        return value

    do

        :GetOwner = ENTITY
        :Weapon = registry

        Weapon.__index = ( key ) =>
            value = Weapon[ key ]
            if value == nil
                value = ENTITY[ key ]
                if value == nil
                    value = getTable( @ )[ key ]
                    if value == nil and key == "Owner"
                        return GetOwner( @ )

            return value

    do

        :Vehicle = registry

        Vehicle.__index = ( key ) =>
            value = Vehicle[ key ]
            if value == nil
                value = ENTITY[ key ]
                if value == nil
                    value = getTable( @ )[ key ]

            return value

    do

        :NPC = registry

        NPC.__index = ( key ) =>
            value = NPC[ key ]
            if value == nil
                value = ENTITY[ key ]
                if value == nil
                    value = getTable( @ )[ key ]

            return value

    do

        import getmetatable, setmetatable from debug
        local object

        metatable = getmetatable( object )
        if metatable == nil
            metatable = {}
            setmetatable( object, metatable )

        registry[ "nil" ] = metatable

        object = 0
        metatable = getmetatable( object )
        if metatable == nil
            metatable = {}
            setmetatable( object, metatable )

        registry[ "number" ] = metatable

        object = ""
        metatable = getmetatable( object )
        if metatable == nil
            metatable = {}
            setmetatable( object, metatable )

        registry[ "string" ] = metatable

        object = false
        metatable = getmetatable( object )
        if metatable == nil
            metatable = {}
            setmetatable( object, metatable )

        registry[ "boolean" ] = metatable

        object = ->
        metatable = getmetatable( object )
        if getmetatable( object ) == nil
            metatable = {}
            setmetatable( object, metatable )

        registry[ "function" ] = metatable

        object = coroutine.create( object )
        metatable = getmetatable( object )
        if metatable == nil
            metatable = {}
            setmetatable( object, metatable )

        registry[ "thread" ] = metatable

:IsValid, :GetClass = ENTITY
:Alive, :IsBot = PLAYER

do

    getmetatable = getmetatable

    -- Player
    ENTITY.IsPlayer = =>
        return getmetatable( @ ) == PLAYER

    -- Vehicle
    do

        metatable = registry[ "Vehicle" ]

        ENTITY.IsVehicle = =>
            return getmetatable( @ ) == metatable

    -- NPC
    do

        metatable = registry[ "NPC" ]

        ENTITY.IsNPC = =>
            return getmetatable( @ ) == metatable

    -- NextBot
    do

        metatable = registry[ "NextBot" ]

        ENTITY.IsNextBot = =>
            return getmetatable( @ ) == metatable

    -- number
    do

        metatable = registry[ "number" ]

        global isnumber = =>
            return getmetatable( @ ) == metatable

    -- string
    do

        metatable = registry[ "string" ]

        global isstring = =>
            return getmetatable( @ ) == metatable

    -- boolean
    do

        metatable = registry[ "boolean" ]

        global isbool = =>
            return getmetatable( @ ) == metatable

    -- function
    do

        metatable = registry[ "function" ]

        global isfunction = =>
            return getmetatable( @ ) == metatable

    -- Vector
    do

        metatable = registry[ "Vector" ]

        global isvector = =>
            return getmetatable( @ ) == metatable

    -- Angle
    do

        metatable = registry[ "Angle" ]

        global isangle = =>
            return getmetatable( @ ) == metatable

    -- VMatrix
    do

        metatable = registry[ "VMatrix" ]

        global ismatrix = =>
            return getmetatable( @ ) == metatable

    -- Panel
    if CLIENT

        metatable = registry[ "Panel" ]

        global ispanel = =>
            return getmetatable( @ ) == metatable

    -- Color
    do

        metatable = registry[ "Color" ] or getmetatable( color_white )

        global IsColor = =>
            return getmetatable( @ ) == metatable

        do

            setmetatable = setmetatable
            isnumber = isnumber
            tonumber = tonumber

            global Color = ( r, g, b, a ) ->
                if r

                    unless isnumber( r )
                        r = tonumber( r ) or 255

                    if r > 255
                        r = 255
                    elseif r < 0
                        r = 0

                else
                    r = 255

                if g

                    unless isnumber( g )
                        g = tonumber( g ) or 255

                    if g > 255
                        g = 255
                    elseif g < 0
                        g = 0

                else
                    g = 255

                if b

                    unless isnumber( b )
                        b = tonumber( b ) or 255

                    if b > 255
                        b = 255
                    elseif b < 0
                        b = 0

                else
                    b = 255

                if a

                    unless isnumber( a )
                        a = tonumber( a ) or 255

                    if a > 255
                        a = 255
                    elseif a < 0
                        a = 0

                else
                    a = 255

                return setmetatable( { :r, :g, :b, :a }, metatable )

do

    import TraceLine from util
    FrameNumber = FrameNumber
    distance = 4096 * 8

    trace = {}

    util.GetPlayerTrace = ( dir ) =>
        start = @EyePos!

        return {
            start: start
            endpos: start + ( ( dir or @GetAimVector! ) * distance )
            filter: @
        }

    util.QuickTrace = ( origin, dir, filter ) ->
        trace.start = origin
        trace.endpos = origin + dir
        trace.filter = filter
        return TraceLine( trace )

    PLAYER.GetEyeTrace = =>
        if CLIENT
            if @m_iLastEyeTrace == FrameNumber!
                return @m_tEyeTrace

            @m_iLastEyeTrace = FrameNumber!

        trace.start = @EyePos!
        trace.endpos = trace.start + ( @GetAimVector! * distance )
        trace.filter = @

        @m_tEyeTrace = TraceLine( trace )
        return @m_tEyeTrace

    PLAYER.GetEyeTraceNoCursor = =>
        if CLIENT
            if @m_iLastAimTrace == FrameNumber!
                return @m_tAimTrace

            @m_iLastAimTrace = FrameNumber!

        trace.start = @EyePos!
        trace.endpos = trace.start + ( @EyeAngles!\Forward! * distance )
        trace.filter = @

        @m_tAimTrace = TraceLine( trace )
        return @m_tAimTrace

do

    GetConVar_Internal = GetConVar_Internal
    cache = {}

    global GetConVar = ( name ) ->
        if cache[ name ] == nil
            value = GetConVar_Internal( name )
            if value == nil
                return

            cache[ name ] = value
            return value

        return cache[ name ]

Register( "Player Shoot Position Fix", ( hookName ) ->
    :GetShootPos = PLAYER

    hook_Add( "SetupMove", hookName, =>
        if IsBot( @ ) or not Alive( @ )
            return

        @m_RealShootPos = GetShootPos( @ )

    PRE_HOOK )

    hook_Add "EntityFireBullets", hookName, ( data ) =>
        if not @IsPlayer! or IsBot( @ ) or not Alive( @ )
            return

        src = GetShootPos( @ )
        if data.Src == src
            data.Src = @m_RealShootPos or src
            return true

( hookName ) ->
    hook_Remove "EntityFireBullets", hookName
    hook_Remove "SetupMove", hookName,
true )

do

    gameevent.Listen( "player_hurt" )
    Player = Player

    hook_Add( "player_hurt", getHookName( "Player Decals Fix" ), ( data ) ->
        health = data.health
        if health > 0
            return

        ply = Player( data.userid )
        if IsValid( ply ) and Alive( ply )
            Simple 0.25, ->
                if IsValid( ply )
                    ply\RemoveAllDecals!
                    return

    PRE_HOOK )

-- Trying to start a new lag compensation session while one is already active!
-- Source: https://github.com/Heyter/glua-turbo/blob/main/2_random_patches.lua
do

    cLagCompensation = PLAYER.CLagCompensation
    unless cLagCompensation
        cLagCompensation = PLAYER.LagCompensation
        PLAYER.CLagCompensation = cLagCompensation

    PLAYER.LagCompensation = ( bool ) =>
        if @m_bLagCompensation ~= bool
            @m_bLagCompensation = bool
            return cLagCompensation( @, bool )

do

    :IsOnGround, :GetMoveType = ENTITY

    do

        MOVETYPE_LADDER = MOVETYPE_LADDER

        hook_Add "PlayerFootstep", getHookName( "Player Footstep Fix" ), =>
            if not IsOnGround( @ ) and GetMoveType( @ ) ~= MOVETYPE_LADDER
                return true


    MOVETYPE_NOCLIP = MOVETYPE_NOCLIP
    IN_DUCK = IN_DUCK

    hook_Add( "StartCommand", getHookName( "Air Crouching Fix" ), ( cmd ) =>
        if GetMoveType( @ ) == MOVETYPE_NOCLIP or IsOnGround( @ ) or cmd\KeyDown( IN_DUCK ) or not @Crouching!
            return

        cmd\AddKey( IN_DUCK )
        return

    PRE_HOOK )

if SERVER

	CreateConVar( "room_type", "0" )

	scripted_ents.Register( {
		Base: "base_point"
		Type: "point"
	}, "info_ladder" )

    do

        :GetPhysicsObject = ENTITY

        ENTITY.PhysWake = =>
            phys = GetPhysicsObject( @ )
            if phys and phys\IsValid!
                phys\Wake!
                return true

            return false

    hook_Add "PlayerSpawn", getHookName( "Player Color Fix" ), =>
        @SetColor( color_white )

	Register( "Default Deploy Speed Fix", ->
		RunConsoleCommand( "sv_defaultdeployspeed", "1" ),
    ->
        conVar = GetConVar( "sv_defaultdeployspeed" )
        if conVar ~= nil
            RunConsoleCommand( "sv_defaultdeployspeed", conVar\GetDefault! )
    )

    Register( "Steam Auth Protection", ( hookName ) ->
        sv_lan = GetConVar( "sv_lan" )

        hook_Add( "PlayerInitialSpawn", hookName, =>
            if sv_lan\GetBool!
                return

            if IsBot( @ ) or @IsListenServerHost! or @IsFullyAuthenticated!
                return

            @Kick( "Your SteamID wasn\'t fully authenticated, try restart your Steam client." )
            return
        PRE_HOOK ),
    ( hookName ) ->
        hook_Remove "PlayerInitialSpawn", hookName
    )

    :GetInternalVariable = ENTITY

    do

        :GetName, :SetSaveValue, :Fire = ENTITY
        import FindByClass from ents

        hookName, classes = getHookName( "Area Portals Fix" ), {
            func_door_rotating: true
            prop_door_rotating: true
            func_movelinear: true
            func_door: true
        }

        start = ->
            hook_Add( "EntityRemoved", hookName, ( entity ) ->
                unless classes[ GetClass( entity ) ]
                    return

                name = GetName( entity )
                if #name == 0 then
                    return

                for portal in *FindByClass( "func_areaportal" )
                    if GetInternalVariable( portal, "target" ) == name
                        SetSaveValue( portal, "target", "" )
                        Fire( portal, "open" )

            PRE_HOOK )

        stop = ->
            hook_Remove "EntityRemoved", hookName
            return

        hook_Add "PostCleanupMap", hookName, start, PRE_HOOK
        hook_Add "PreCleanupMap", hookName, stop, PRE_HOOK
        hook_Add "ShutDown", hookName, stop, PRE_HOOK
        start!

    do

        SOLID_VPHYSICS = SOLID_VPHYSICS

        hook_Add( "PlayerSpawnedSENT", getHookName( "HL2 Chargers Physics" ), ( _, entity ) ->
            className = GetClass( entity )
            if className == "item_suitcharger" or className == "item_healthcharger"
                entity\PhysicsInit( SOLID_VPHYSICS )
                entity\PhysWake!
                return

        PRE_HOOK )

	-- Little optimization idea by Billy (used in voicebox)
	-- "for something that really shouldn't be O(n)"
	-- https://i.imgur.com/yPtoNvO.png
	-- https://i.imgur.com/a0lmB9m.png
    do

        cUserID = PLAYER.CUserID
        unless cUserID
            cUserID = PLAYER.UserID
            PLAYER.CUserID = cUserID

        PLAYER.UserID = =>
            return @m_bUserID or cUserID( @ )

        do

            hookName, cacheFunc = getHookName( "UserID Cache" ), =>
                @m_bUserID = cUserID( @ )

            hook_Add "PlayerInitialSpawn", hookName, cacheFunc, PRE_HOOK
            hook_Add "PlayerAuthed", hookName, cacheFunc, PRE_HOOK

    -- https://github.com/Facepunch/garrysmod-issues/issues/2452
    do

        hookName = getHookName( "Pod Performance Fix" )
        EFL_NO_THINK_FUNCTION = EFL_NO_THINK_FUNCTION

        hook_Add( "OnEntityCreated", hookName, ( entity ) ->
            if GetClass( entity ) == "prop_vehicle_prisoner_pod"
                entity\AddEFlags( EFL_NO_THINK_FUNCTION )
                return

        PRE_HOOK )

        hook_Add( "PlayerLeaveVehicle", hookName, ( _, entity ) ->
            if GetClass( entity ) == "prop_vehicle_prisoner_pod"
                hook_Add( "Think", entity, ->
                    hook_Remove "Think", entity

                    if GetInternalVariable( entity, "m_bEnterAnimOn" ) or GetInternalVariable( entity, "m_bExitAnimOn" )
                        return

                    entity\AddEFlags( EFL_NO_THINK_FUNCTION )
                    return

                PRE_HOOK )
                return

        PRE_HOOK )

        hook_Add( "PlayerEnteredVehicle", hookName, ( _, entity ) ->
            if GetClass( entity ) == "prop_vehicle_prisoner_pod"
                entity\RemoveEFlags( EFL_NO_THINK_FUNCTION )
                hook_Remove "Think", entity
                return

        PRE_HOOK )

	-- Fixes for prop_vehicle_prisoner_pod, worldspawn (and other not Valid but not NULL entities) damage taking (bullets only)
	-- Explosive damage only works if is located in front of prop_vehicle_prisoner_pod (wtf?)
    do

        :TakePhysicsDamage = ENTITY

        hook_Add( "EntityTakeDamage", getHookName( "prop_vehicle_prisoner_pod Damage Fix" ), ( entity, damageInfo ) ->
            if GetClass( entity ) ~= "prop_vehicle_prisoner_pod" or entity.AcceptDamageForce
                return

            TakePhysicsDamage( entity, damageInfo )
            return

        PRE_HOOK )

if CLIENT and not MENU_DLL

    -- cl_drawhud chat fix
    do

        cl_drawhud = GetConVar( "cl_drawhud" )
        import Close from chat

        hook_Add "StartChat", getHookName( "cl_drawhud fix" ), ->
            if cl_drawhud\GetBool!
                return

            Close!
            return true

        cvars.AddChangeCallback( "cl_drawhud", Close, getHookName( "cl_drawhud fix" ) )

    do

        import OnConVarChanged from cvars
        :GetDefault = registry.ConVar
        GetConVar = GetConVar

        gameevent.Listen( "server_cvar" )
        values = {}

        hook_Add( "server_cvar", "cvars.OnConVarChanged", ( data ) ->
            name = data.cvarname

            old = values[ name ]
            if old == nil
                conVar = GetConVar( name )
                unless conVar
                    return

                old = GetDefault( conVar )
                values[ name ] = old
            else
                values[ name ] = data.cvarvalue

            OnConVarChanged( name, old, data.cvarvalue )
            return

        PRE_HOOK )

	-- Speeding up LocalPlayer
    do

        getLocalPlayer = util.GetLocalPlayer
        unless getLocalPlayer
            getLocalPlayer = LocalPlayer
            util.GetLocalPlayer = getLocalPlayer

        entity = NULL

        global LocalPlayer = ->
            entity = getLocalPlayer!
            if entity and IsValid( entity )
                global LocalPlayer = ->
                    return entity

            return entity

    -- https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/extensions/client/render.lua
    do

        import Start from cam

        do

            view = { type: "2D" }

            cam.Start2D = ->
                Start( view )

        do

            view = { type: "3D" }

            cam.Start3D = ( origin, angles, fov, x, y, w, h, znear, zfar ) ->
                view.origin, view.angles, view.fov = origin, angles, fov

                if x ~= nil and y ~= nil and w ~= nil and h ~= nil
                    view.x, view.y = x, y
                    view.w, view.h = w, h
                    view.aspect = w / h
                else
                    view.x, view.y = nil, nil
                    view.w, view.h = nil, nil
                    view.aspect = nil

                if znear ~= nil and zfar ~= nil
                    view.znear, view.zfar = znear, zfar
                else
                    view.znear, view.zfar = nil, nil

                return Start( view )

	-- https://github.com/Facepunch/garrysmod-issues/issues/1091
    do

        camStack = 0

        cStartOrthoView = cam.CStartOrthoView
        unless cStartOrthoView
            cStartOrthoView = cam.StartOrthoView
            cam.CStartOrthoView = cStartOrthoView

        cam.StartOrthoView = ( a, b, c, d ) ->
            camStack += 1
            return cStartOrthoView( a, b, c, d )

        cEndOrthoView = cam.CEndOrthoView
        unless cEndOrthoView
            cEndOrthoView = cam.EndOrthoView
            cam.CEndOrthoView = cEndOrthoView

        cam.EndOrthoView = ->
            if camStack == 0
                return

            camStack -= 1

            if camStack < 0
                camStack = 0

            return cEndOrthoView!

    do

        :HasFocus = system

        do

            IN_ATTACK, IN_ATTACK2 = IN_ATTACK, IN_ATTACK2
            lastNoFocusTime = 0

            hook_Add( "CreateMove", getHookName( "Focus Attack Fix" ), ( cmd ) ->
                if ( CurTime! - lastNoFocusTime ) < 0.25
                    cmd\RemoveKey( IN_ATTACK )
                    cmd\RemoveKey( IN_ATTACK2 )

                if HasFocus!
                    return

                lastNoFocusTime = CurTime!

            PRE_HOOK )

        Register( "Screen Capture Fix", ( hookName ) ->
            import IsGameUIVisible, ActivateGameUI, HideGameUI from gui
            import CursorVisible from vgui

            local lastState
            hook_Add( "Think", hookName, ->
                if HasFocus!
                    if lastState ~= nil
                        if lastState
                            HideGameUI!

                        lastState = nil

                elseif lastState == nil
                    if CursorVisible!
                        return

                    lastState = not IsGameUIVisible!
                    if lastState
                        ActivateGameUI!
                        return

            PRE_HOOK )
        ( hookName ) ->
            hook_Remove "Think", hookName
        )

MsgC( SERVER and Color( 50, 100, 250 ) or Color( 250, 100, 50 ), "[" .. addonName .. "] ", color_white, table.Random( {
    "Here For You ♪", "Game Patched!", "OK", "Successfully initialized!",
    "Powered by Pika Software!", "Made with <3", "Yeah, well", "Alright",
    "Hello there", "Specially for you!", "Hello?", "Wow", "I'm here :",
    "Init!", "Say hi!", "Performance Update", "Yippee!",
    "Thanks for installation <3"
}, true ) .. "\n" )
